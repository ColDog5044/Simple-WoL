name: "Code Scanning and Security Analysis"

on:
    push:
        branches: ["main", "master", "develop", "dev"]
    pull_request:
        branches: ["main", "master"]
    schedule:
        - cron: "0 6 * * 1" # Weekly on Mondays at 6 AM UTC

permissions:
    actions: read
    contents: read
    security-events: write

jobs:
    codeql:
        name: CodeQL Analysis
        runs-on: ubuntu-latest
        timeout-minutes: 360

        strategy:
            fail-fast: false
            matrix:
                language: ["python"]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: ${{ matrix.language }}
                  config-file: ./.github/codeql/codeql-config.yml

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-build.txt

            - name: Autobuild
              uses: github/codeql-action/autobuild@v3

            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:${{matrix.language}}"

    security-scan:
        name: Security Vulnerability Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install security tools
              run: |
                  python -m pip install --upgrade pip
                  pip install bandit safety semgrep
                  pip install -r requirements.txt

            - name: Run Bandit security linter
              run: |
                  bandit -r src/ -f json -o bandit-report.json || true
                  bandit -r src/ -f txt

            - name: Run Safety check for known vulnerabilities
              run: |
                  safety check --json --output safety-report.json || true
                  safety check

            - name: Run Semgrep static analysis
              run: |
                  semgrep --config=auto src/ --json --output=semgrep-report.json || true
                  semgrep --config=auto src/

            - name: Upload security reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: security-reports
                  path: |
                      bandit-report.json
                      safety-report.json
                      semgrep-report.json

    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13"

            - name: Install quality tools
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8 black isort mypy pylint
                  pip install -r requirements.txt

            - name: Run Black formatter check
              run: |
                  black --check --diff src/

            - name: Run isort import sorter check
              run: |
                  isort --check-only --diff src/

            - name: Run Flake8 linter
              run: |
                  flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
                  flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

            - name: Run MyPy type checker
              run: |
                  mypy src/ --ignore-missing-imports || true

            - name: Run Pylint
              run: |
                  pylint src/ --exit-zero --output-format=text --reports=yes > pylint-report.txt
                  cat pylint-report.txt

            - name: Upload quality reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: quality-reports
                  path: |
                      pylint-report.txt
