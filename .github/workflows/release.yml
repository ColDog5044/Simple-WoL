name: "Automated Release"

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate version format
      run: |
        version="${{ steps.get-version.outputs.version }}"
        if [[ ! $version =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $version"
          echo "Expected format: vX.Y.Z (e.g., v1.0.0)"
          exit 1
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "No tests found"
    
    - name: Test application import
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); from simple_wol import WakeOnLanApp; print('âœ“ Application imports successfully')"

  build-release:
    name: Build Release Artifacts
    needs: validate-release
    runs-on: ${{ matrix.config.os }}
    
    strategy:
      matrix:
        config:
          - os: windows-latest
            build-cmd: "python dev.py build-windows"
            artifact-name: "SimpleWoL-Windows"
            archive-cmd: "Compress-Archive -Path dist/* -DestinationPath SimpleWoL-Windows.zip"
            archive-file: "SimpleWoL-Windows.zip"
          - os: ubuntu-latest
            build-cmd: "python dev.py build-linux"
            artifact-name: "SimpleWoL-Linux"
            archive-cmd: "tar -czf SimpleWoL-Linux.tar.gz -C dist ."
            archive-file: "SimpleWoL-Linux.tar.gz"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
    
    - name: Build executable
      run: ${{ matrix.config.build-cmd }}
    
    - name: Create archive
      run: ${{ matrix.config.archive-cmd }}
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact-name }}
        path: ${{ matrix.config.archive-file }}
        retention-days: 90

  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Generate changelog
      id: changelog
      run: |
        version="${{ needs.validate-release.outputs.version }}"
        
        # Get the latest tag (excluding the current one if it exists)
        latest_tag=$(git tag --sort=-version:refname | grep -v "^${version}$" | head -n1)
        
        if [ -z "$latest_tag" ]; then
          echo "No previous tag found, using initial commit"
          latest_tag=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "Generating changelog from $latest_tag to $version"
        
        # Generate changelog
        changelog=$(git log --pretty=format:"- %s" "$latest_tag"..HEAD)
        
        if [ -z "$changelog" ]; then
          changelog="- Initial release"
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # Simple Wake-on-LAN $version
        
        ## What's New
        
        $changelog
        
        ## Downloads
        
        - **Windows**: Download \`SimpleWoL-Windows.zip\` and extract the executable
        - **Linux**: Download \`SimpleWoL-Linux.tar.gz\` and extract the executable
        
        ## Installation
        
        ### Windows
        1. Download \`SimpleWoL-Windows.zip\`
        2. Extract to a folder of your choice
        3. Run \`SimpleWoL.exe\`
        
        ### Linux
        1. Download \`SimpleWoL-Linux.tar.gz\`
        2. Extract: \`tar -xzf SimpleWoL-Linux.tar.gz\`
        3. Make executable: \`chmod +x simple-wol\`
        4. Run: \`./simple-wol\`
        
        ## System Requirements
        
        - **Windows**: Windows 10 or later
        - **Linux**: Modern Linux distribution with GUI support
        - **Network**: Devices to wake must support Wake-on-LAN
        
        ## Support
        
        For issues, feature requests, or questions, please visit the [GitHub Issues](https://github.com/ColDog5044/Simple-WoL/issues) page.
        EOF
        
        echo "Release notes generated"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Simple Wake-on-LAN ${{ needs.validate-release.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, 'beta') || contains(needs.validate-release.outputs.version, 'alpha') || contains(needs.validate-release.outputs.version, 'rc') }}
        files: |
          artifacts/SimpleWoL-Windows/SimpleWoL-Windows.zip
          artifacts/SimpleWoL-Linux/SimpleWoL-Linux.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: Publish Release Notifications
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Post-release tasks
      run: |
        echo "ðŸŽ‰ Release ${{ needs.validate-release.outputs.version }} published successfully!"
        echo "ðŸ“¦ Artifacts uploaded to GitHub Releases"
        echo "ðŸ”” Consider updating documentation and announcements"
